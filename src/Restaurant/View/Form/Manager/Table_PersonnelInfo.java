
package Restaurant.View.Form.Manager;
import Restaurant.Controller.Service.AppData;
import Restaurant.View.Component.Dashboard.SearchOptinEvent;
import Restaurant.View.Component.Dashboard.SearchOption;
import Restaurant.View.Component.Manager.SimpleFormManager;
import Restaurant.View.Dialog.frm_AddNewPersional;
import Restaurant.View.Dialog.frm_EditPersional;
import com.formdev.flatlaf.FlatClientProperties;
import javax.swing.table.DefaultTableModel;


import java.util.Date;

import javax.swing.JOptionPane;


import Restaurant.Controller.Service.ServicePersional;
import Restaurant.Model.ModelPersional;
import Restaurant.View.Component.Login.PanelLoginAndRegister;

import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.ImageIcon;


public class Table_PersonnelInfo extends SimpleFormManager {

    private ServicePersional service;
    private ArrayList<ModelPersional> list;
    DecimalFormat df;
    private PanelLoginAndRegister panel;

    /**
     * Creates new form Table
     */
    public Table_PersonnelInfo() {
        initComponents();
        service = new ServicePersional();
        df = new DecimalFormat("#,###");
        initTable();
        //Search
        txt.addEventOptionSelected(new SearchOptinEvent() {
            @Override
            public void optionSelected(SearchOption option, int index) {
                txt.setHint("Search by " + option.getName() + "...");
            }
        });
        txt.addOption(new SearchOption("Name", new ImageIcon(getClass().getResource("/Icons/Search/user.png"))));
        txt.addOption(new SearchOption("Tel", new ImageIcon(getClass().getResource("/Icons/Search/tel.png"))));
        txt.addOption(new SearchOption("Email", new ImageIcon(getClass().getResource("/Icons/Search/email.png"))));
        txt.addOption(new SearchOption("Address", new ImageIcon(getClass().getResource("/Icons/Search/address.png"))));

        //Table
        table.setDefaultRenderer(Object.class, new TableGradientCell());
        jPanel1.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:1,1,1,1,$TableHeader.bottomSeparatorColor,,10");
        table.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                + "separatorColor:$TableHeader.background");
        scroll.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:3,0,3,0,$Table.background,10,10");
        scroll.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, ""
                + "hoverTrackColor:null");
        //testData();
    }

//    private void testData() {
//   
//        model.addRow(new Object[]{1, "Thit ga", "40,000đ", "Kg"});
//        model.addRow(new Object[]{2, "Thit heo", "50,000đ", "Kg"});
//        model.addRow(new Object[]{3, "Thit bo", "80,000đ", "Kg"});
//        model.addRow(new Object[]{4, "Tom", "100,000đ", "Kg"});
//        model.addRow(new Object[]{5, "Ca hoi", "500,000đ", "Kg"});
//    }

        public void initTable() {
                 DefaultTableModel model = (DefaultTableModel) table.getModel();
               
            try {
                list = service.listEmp();
                for (ModelPersional data : list) {
                    model.addRow(new Object[]{data.getiD_Emp(), data.getNameEmp(), data.getDate(), data.getphoneNumber(),data.getPos(),data.getStatus()});
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        uWPButton1 = new Restaurant.View.Component.Dashboard.UWPButton();
        uWPButton2 = new Restaurant.View.Component.Dashboard.UWPButton();
        uWPButton3 = new Restaurant.View.Component.Dashboard.UWPButton();
        txt = new Restaurant.View.Component.Dashboard.TextFieldSearchOption();

        jPanel1.setLayout(new java.awt.BorderLayout());

        table.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ma NV", "Tên NV", "Ngày vào làm", "SDT", "Vị trí", "Tình trạng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(40);
        scroll.setViewportView(table);

        uWPButton1.setText("Thêm");
        uWPButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uWPButton1ActionPerformed(evt);
            }
        });

        uWPButton2.setText("Xóa");
        uWPButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uWPButton2ActionPerformed(evt);
            }
        });

        uWPButton3.setText("Sửa");
        uWPButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uWPButton3ActionPerformed(evt);
            }
        });

        txt.setText("textFieldSearchOption1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(uWPButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uWPButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(uWPButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1212, 1212, 1212)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 1290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(uWPButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(uWPButton2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(uWPButton3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void uWPButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uWPButton1ActionPerformed

        frm_AddNewPersional newfrm = new frm_AddNewPersional(this); // Truyền form cha (Table_PersonnelInfo) vào form con (frm_AddNewPersional)
           newfrm.setVisible(true);
    }//GEN-LAST:event_uWPButton1ActionPerformed

    private void uWPButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uWPButton2ActionPerformed
            // Lấy ra index của dòng được chọn
            int selectedRow = table.getSelectedRow();
            if (selectedRow != -1) { // Kiểm tra xem có dòng nào được chọn không
            // Lấy ra ID của nhân viên cần xóa
            int employeeID = (int) table.getValueAt(selectedRow, 0); // Giả sử ID của nhân viên là cột đầu tiên trong bảng

            // Thực hiện xóa nhân viên từ cơ sở dữ liệu
            try {
                service.deleteEmployee(employeeID); // Gọi phương thức xóa nhân viên từ Service
                // Xóa dòng được chọn từ bảng
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.removeRow(selectedRow);

                // Hiển thị thông báo xóa thành công
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                // Xử lý lỗi nếu có
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi khi xóa nhân viên!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Hiển thị thông báo nếu không có dòng nào được chọn
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên cần xóa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_uWPButton2ActionPerformed

    private void uWPButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uWPButton3ActionPerformed
       
                // Lấy ra index của dòng được chọn
        int selectedRow = table.getSelectedRow();
        if (selectedRow != -1) { // Kiểm tra xem có dòng nào được chọn không
            // Lấy ra thông tin của dòng được chọn
            int employeeID = (int) table.getValueAt(selectedRow, 0); // ID của nhân viên
            String nameEmp = (String) table.getValueAt(selectedRow, 1); // Tên nhân viên
            Date dateOfWork = (Date) table.getValueAt(selectedRow, 2); // Ngày vào làm
            String phoneNumber = (String) table.getValueAt(selectedRow, 3); // Số điện thoại
            String position = (String) table.getValueAt(selectedRow, 4); // Vị trí làm việc
            String status = (String) table.getValueAt(selectedRow, 5); // Trạng thái

            // Mở form sửa với thông tin của dòng được chọn
            frm_EditPersional editForm = new frm_EditPersional(this);
            editForm.setData(employeeID, nameEmp, dateOfWork, phoneNumber, position, status);
            editForm.setVisible(true);
        } else {
            // Hiển thị thông báo nếu không có dòng nào được chọn
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên cần sửa!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_uWPButton3ActionPerformed

    public void refreshData() {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    model.setRowCount(0); // Xóa hết các dòng hiện tại trong bảng
    initTable(); // Load lại dữ liệu mới
}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable table;
    private Restaurant.View.Component.Dashboard.TextFieldSearchOption txt;
    private Restaurant.View.Component.Dashboard.UWPButton uWPButton1;
    private Restaurant.View.Component.Dashboard.UWPButton uWPButton2;
    private Restaurant.View.Component.Dashboard.UWPButton uWPButton3;
    // End of variables declaration//GEN-END:variables
}
